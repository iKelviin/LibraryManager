@page "/{BookId:guid}/book-details"
@using LibraryManager.Site.Models
@using LibraryManager.Site.Services.Interfaces
@inject IBookService BookService
@inject ILoanService LoanService
@inject CustomAuthenticationStateProvider Auth
@attribute [Authorize]

<h3>Detalhes</h3>

@if (Loading)
{
    <p>Carregando informações do livro...</p>
}
else
{
    @if (book.Id != Guid.Empty)
    {
        <div class="card">
            <div class="card-body">
                <div class="row g-4">
                    <div class="col-lg-3">
                        <div class="sticky-side-div">
                            <div class="card ribbon-box border shadow-none right">
                                <div class="ribbon-two ribbon-two-danger"><span><i class="ri-fire-fill align-bottom"></i> Hot</span></div>
                                <img src="@book.ImageUrl" alt="@book.Title" class="img-fluid rounded">
                            </div>
                            <div class="hstack gap-2">
                                @if (@book.Status == "Available")
                                {
                                    <button class="btn btn-success w-100" @onclick="LoanBook">Alugar</button>
                                }
                                else if(@book.Status == "Borrowed" && @loanBook != null)
                                {
                                    <button class="btn btn-info w-100" @onclick="ReturnBook">Devolver</button>
                                }
                                else if(@book.Status == "Borrowed"  && @loanBook == null)
                                {
                                    <button class="btn btn-danger w-100" disabled>Alugado</button>
                                }
                                else if(@book.Status == "Archived")
                                {
                                    <button class="btn btn-warning w-100" disabled>Arquivado</button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-9">
                        <h1>@book.Title</h1>
                        <div class="hstack gap-3 flex-wrap">
                            <div class="text-muted fs-4">Autor : <a class="text-primary fw-medium">@book.Author</a></div>
                            <div class="vr"></div>
                            <div class="text-muted fs-4">ISBN : <span class="text-body fw-medium">@book.ISBN</span></div>
                            <div class="vr"></div>
                            <div class="text-muted fs-4">Ano de Publicação : <span class="text-body fw-medium">@book.PublicationYear</span></div>
                        </div>
                        <div class="d-flex flex-wrap gap-2 align-items-center mt-3">
                            <div class="text-muted fs-20">
                                <span class="mdi mdi-star text-warning"></span>
                                <span class="mdi mdi-star text-warning"></span>
                                <span class="mdi mdi-star text-warning"></span>
                                <span class="mdi mdi-star text-warning"></span>
                                <span class="mdi mdi-star text-warning"></span>
                            </div>
                            <div class="text-muted">( 5.50k Avaliações Positivas )</div>
                        </div>
                        <div class="mt-4 tab-content border p-4 shadow">
                            <h4 class="text-center">Histórico de Alocações</h4>
                            <div class="table-responsive mt-4 p-2">
                                <table class="table table-bordered table-centered align-middle table-nowrap mb-0">
                                    <thead class="text-muted table-light">
                                    <tr>
                                        <th scope="col">Usuario</th>
                                        <th scope="col">Data Locação</th>
                                        <th scope="col">Data Prevista Retorno</th>
                                        <th scope="col">Status</th>
                                    </tr>
                                    </thead>

                                    <tbody>
                                    @if (LoadingLoan)
                                    {
                                        <tr>
                                            <td colspan="7">
                                                <div class="text-center">
                                                    <div class="spinner-border text-primary avatar-sm" role="status">
                                                        <span class="visually-hidden">Carregando...</span>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                    else if (loans.Count == 0)
                                    {
                                        <tr>
                                            <td colspan="7">
                                                <div class="text-center">
                                                    <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop"
                                                               colors="primary:#405189,secondary:#0ab39c"
                                                               style="width:75px;height:75px"></lord-icon>
                                                    <h5 class="mt-2">Desculpe! Nenhum registro encontrado!</h5>
                                                    <p class="text-muted">Não encontramos nenhuma alocação feita para esse livro.</p>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var loan in loans)
                                        {
                                            <tr class="">
                                                <td>
                                                    @loan.UserName
                                                </td>
                                                <td>
                                                    @loan.LoanDate
                                                </td>
                                                <td>
                                                    @loan.ExpectedReturnDate
                                                </td>
                                                <td>
                                                    @if (loan.BookReturned)
                                                    {
                                                        <span class="badge bg-success">Retornado</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Pendente</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
    }
    else
    {
        <p>Livro não encontrado.</p>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p>@ErrorMessage</p>
    }
}

@code {
    [Parameter] public Guid BookId { get; set; }
    public Guid UserId { get; set; }
    private List<LoanViewModel> loans { get; set; }
    private LoanViewModel? loanBook { get; set; }
    private BookViewModel book { get; set; }
    public string? ErrorMessage;
    public bool Loading = true;
    public bool LoadingLoan = true;
    [Inject]
    public SweetAlert sweetAlert { get; set; }

    [Inject]
    public Toastify toast { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadBook();
        await LoadLoans();
        StateHasChanged();
    }
    
    private async Task LoadLoans()
    {
        UserId = await Auth.GetUserIdAsync();
        var result = await LoanService.GetAllLoans("");
        if (result.IsSucces)
        {
            loans = result.Data!;
            loans = loans.Where(b => b.IdBook == BookId).ToList();
            loanBook = loans.SingleOrDefault(b => b.IdBook == BookId && b.IdUser == UserId && !b.BookReturned);
        }
        else
        {
            await toast.ShowError("Erro ao listar os aluguéis!");
        }

        LoadingLoan = false;
    }

    private async Task LoadBook()
    {
        var result = await BookService.GetBookById(BookId);
        if (result.IsSucces)
        {
            book = result.Data!;
        }
        else
        {
            await toast.ShowError("Erro ao listar os livros!");
        }
        Loading = false;
    }

    private async Task LoanBook()
    {
        var confirm = await sweetAlert.ShowConfirmLoan(book.Title);
        if (confirm.Value)
        {
            var newLoan = new LoanCreateModel(UserId, BookId);
            var result = await LoanService.LoanBook(newLoan);
            if (!result.IsSucces)
            {
                await toast.ShowError("Erro ao alugar o livro!");
            }
            else
            {
                await sweetAlert.ShowLoanSucess();
                await toast.ShowSucess("Livro alugado com sucesso!");
            }
            await LoadData();
        }        
    }
    
    private async Task ReturnBook()
    {
        var confirm = await sweetAlert.ShowConfirmReturnBook(book.Title);
        if (confirm.Value)
        {
            var result = await LoanService.ReturnBook(loanBook.Id);
            if (!result.IsSucces)
            {
                await toast.ShowError("Erro ao devolver o livro!");
            }
            else
            {
                await sweetAlert.ShowReturnSucess();
                await toast.ShowSucess("Livro devolvido com sucesso!");
            }
            await LoadData();
        }

        
    }
}
