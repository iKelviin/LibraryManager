@page "/books"


@inject IBookService BookService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<section class="mb-5">
    <div class="row">
        <div class="card" style="box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);">
            <div class="card-header">
                <div class="d-lg-flex align-items-center ">
                    <div class="flex-grow-1">
                        <h3 class="card-title mb-0">Lançamentos</h3>
                    </div>
                    <div class="flex-shrink-0 mt-4 mt-lg-0">
                        <a href="/all-books" class="btn btn-soft-primary">Ver Todos<i
                                                                                                   class="ri-arrow-right-line align-bottom"></i></a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="swiper responsive-swiper rounded gallery-light pb-4">
                    <div class="swiper-wrapper">
                        @if (Books == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {


                            @foreach (var book in Books1)
                            {
                                <div class="swiper-slide">
                                    <BookCardComponent Book="book"/>
                                </div>
                            }
                        }
                    </div>
                    <div class="swiper-pagination swiper-pagination-dark"></div>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="mb-5">
    <div class="row">
        <div class="card" style="box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);">
            <div class="card-header">
                <div class="d-lg-flex align-items-center ">
                    <div class="flex-grow-1">
                        <h3 class="card-title mb-0">Os Mais Procurados</h3>
                    </div>
                    <div class="flex-shrink-0 mt-4 mt-lg-0">
                        <a href="/all-books" class="btn btn-soft-primary">Ver Todos<i
                                class="ri-arrow-right-line align-bottom"></i></a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="swiper responsive-swiper rounded gallery-light pb-4">
                    <div class="swiper-wrapper">
                        @if (Books == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {


                            @foreach (var book in Books2)
                            {
                                <div class="swiper-slide">
                                    <BookCardComponent Book="book"/>
                                </div>
                            }
                        }
                    </div>
                    <div class="swiper-pagination swiper-pagination-dark"></div>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="mb-5">
    <div class="row">
        <div class="card" style="box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);">
            <div class="card-header">
                <div class="d-lg-flex align-items-center ">
                    <div class="flex-grow-1">
                        <h3 class="card-title mb-0">Economia & Finanças</h3>
                    </div>
                    <div class="flex-shrink-0 mt-4 mt-lg-0">
                        <a href="/all-books" class="btn btn-soft-primary">Ver Todos<i
                                class="ri-arrow-right-line align-bottom"></i></a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="swiper responsive-swiper rounded gallery-light pb-4">
                    <div class="swiper-wrapper">
                        @if (Books == null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {


                            @foreach (var book in Books3)
                            {
                                <div class="swiper-slide">
                                    <BookCardComponent Book="book"/>
                                </div>
                            }
                        }
                    </div>
                    <div class="swiper-pagination swiper-pagination-dark"></div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    private List<BookViewModel>? Books;
    private List<BookViewModel>? Books1;
    private List<BookViewModel>? Books2;
    private List<BookViewModel>? Books3;
    [Inject]
    public Toastify toast { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("carregarSwiper");
            await LoadData();
            StateHasChanged();
        }
    }

    
    private async Task LoadData()
    {
        var result = await BookService.GetAllBooks();
        if (!result.IsSucces)
        {
            await toast.ShowError("Erro ao listar os livros!");
        }
        
        Books = result.Data;
        
        // Criando listas embaralhadas
        Books1 = EmbaralharLista(Books);
        Books2 = EmbaralharLista(Books);
        Books3 = EmbaralharLista(Books);
    }
    
    // Método para embaralhar a lista
    private List<T> EmbaralharLista<T>(List<T> lista)
    {
        Random random = new Random();
        var shuffledList = new List<T>(lista); // Cópia da lista original
        for (int i = shuffledList.Count - 1; i > 0; i--)
        {
            int j = random.Next(i + 1);
            (shuffledList[i], shuffledList[j]) = (shuffledList[j], shuffledList[i]); // Troca os elementos
        }
        return shuffledList;
    }

}