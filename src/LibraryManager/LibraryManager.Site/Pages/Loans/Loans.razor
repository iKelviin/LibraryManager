@page "/loans"


@inject ILoanService LoanService
@inject IJSRuntime JSRuntime
@inject CustomAuthenticationStateProvider Auth
@attribute [Authorize]

<div class="card">
    <div class="card-header align-items-center d-flex">
        <h4 class="card-title mb-0 flex-grow-1">Meus Livros</h4>
    </div>
    <div class="card-body">
        <div class="row p-2">
            <div class="col-lg-6">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Buscar..." @bind="SearchWord">
                    <button class="btn btn-outline-success material-shadow-none" type="button" @onclick="Search">
                        Pesquisar
                    </button>
                </div>
            </div>
        </div>

        <div class="table-responsive mt-4 p-2">
            <table class="table table-bordered table-centered align-middle table-nowrap mb-0">
                <thead class="text-muted table-light">
                <tr>
                    <th scope="col">Livro</th>
                    <th scope="col">Título</th>
                    <th scope="col">Autor</th>
                    <th scope="col">Ano de Publicação</th>
                    <th scope="col">Data Aluguel</th>
                    <th scope="col">Data Devolução</th>
                    <th scope="col">Status</th>
                    <th scope="col">Ação</th>
                </tr>
                </thead>

                <tbody>
                @if (isLoading)
                {
                    <tr>
                        <td colspan="7">
                            <div class="text-center">
                                <div class="spinner-border text-primary avatar-sm" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
                else if (loans.Count == 0)
                {
                    <tr>
                        <td colspan="7">
                            <div class="text-center">
                                <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop"
                                           colors="primary:#405189,secondary:#0ab39c"
                                           style="width:75px;height:75px"></lord-icon>
                                <h5 class="mt-2">Desculpe! Nenhum registro encontrado!</h5>
                                <p class="text-muted">Não encontramos nenhum alugel feito por você...</p>
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var loan in loans)
                    {
                        <tr class="">
                            <td class="d-flex justify-content-center">
                                <div class="flex-shrink-0">
                                    <div class="avatar-sm">
                                        <img src="@loan.ImageUrl" alt="@loan.BookTitle" class="d-block"
                                             style="height:100%">
                                    </div>
                                </div>
                            </td>
                            <td>
                                @loan.BookTitle
                            </td>
                            <td>
                                @loan.BookAuthor
                            </td>
                            <td>
                                @loan.BookPublicationYear
                            </td>
                            <td>
                                @loan.LoanDate
                            </td>
                            <td>
                                @loan.ExpectedReturnDate
                            </td>
                            <td>
                                @if (loan.BookReturned)
                                {
                                    <span class="badge bg-success">Devolvido</span>
                                }
                                else if (!loan.BookReturned && Today <= loan.ExpectedReturnDate)
                                {
                                    <span class="badge bg-warning">Pendente</span>
                                }
                                else if (!loan.BookReturned && Today >= loan.ExpectedReturnDate)
                                {
                                    <span class="badge bg-danger">Atrasado</span>
                                }
                            </td>
                            <td class="">
                                @if (!loan.BookReturned)
                                {
                                    <button type="button" class="btn btn-sm btn-info"
                                            @onclick="() => ReturnBook(loan.Id)"><span>Devolver</span></button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-sm btn-info" disabled><span>Devolver</span></button>
                                }
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code {
    private List<LoanViewModel>? loans;
    private DateTime Today = DateTime.Today;
    private string SearchWord = string.Empty;
    private bool isLoading = true;
    [Inject] public SweetAlert sweetAlert { get; set; }

    [Inject] public Toastify toast { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("carregarSweetAlert");

            await LoadData();
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        var userId = await Auth.GetUserIdAsync();
        var result = await LoanService.GetAllLoansByUser(userId, SearchWord);
        if (!result.IsSucces)
        {
            await toast.ShowError("Erro ao listar os livros alugados!");
        }

        loans = result.Data!;
        isLoading = false;
    }

    private async Task Search()
    {
        await LoadData();
    }

    private async Task ReturnBook(Guid idLoan)
    {
        var confirm = await sweetAlert.ShowConfirmDelete();
        if (confirm.Value)
        {
            var result = await LoanService.ReturnBook(idLoan);
            if (!result.IsSucces)
            {
                await toast.ShowError("Erro ao devolver o livro!");
            }
            else
            {
                await toast.ShowSucess(result.Data);
                await sweetAlert.ShowReturnSucess();
            }
        }


        await LoadData();
        StateHasChanged();
    }

}